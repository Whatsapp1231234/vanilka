//import db from '../lib/database.js'

import { createHash } from 'crypto'
let Reg = /\|?(.*)([.|] *?)([0-9]*)$/i
let handler = async function (m, { conn, text, usedPrefix, command }) {
  let user = global.db.data.users[m.sender]
  let name2 = conn.getName(m.sender)
  if (user.registered === true) throw `‚ú≥Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n\n¬ø–•–æ—á–µ—Ç –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?\n\n üìå–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞–ø–∏—Å—å \n*${usedPrefix}unreg* <–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä>`
  if (!Reg.test(text)) throw `‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n ‚ú≥Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–º–¥–æ: *${usedPrefix + command} –∏–º—è. –≤–æ–∑—Ä–∞—Å—Ç*\nüìå–ü—Ä–∏–º–µ—Ä : *${usedPrefix + command}* ${name2}.26`
  let [_, name, splitter, age] = text.match(Reg)
  if (!name) throw '‚ú≥Ô∏è –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
  if (!age) throw '‚ú≥Ô∏è –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
  if (name.length >= 30) throw '‚ú≥Ô∏è –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ' 
  age = parseInt(age)
  if (age > 100) throw 'üë¥üèª –í–∞—É, –¥–µ–¥—É—à–∫–∞ —Ö–æ—á–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –±–æ—Ç–∞'
  if (age < 5) throw 'üöº  –µ—Å—Ç—å –¥–µ–¥—É—à–∫–∞, –º–∞–ª—ã—à, —Ö–∏ —Ö–∏ —Ö–∏ '
  user.name = name.trim()
  user.age = age
  user.regTime = + new Date
  user.registered = true
  let sn = createHash('md5').update(m.sender).digest('hex')
  m.reply(`
‚îå‚îÄ„Äå *–ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–ô* „Äç‚îÄ
‚ñ¢ *–ò–º—è:* ${name}
‚ñ¢ *–í–æ–∑—Ä–∞—Å—Ç* : ${age} –ª–µ—Ç–∞
‚ñ¢ *–ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏* :
${sn}
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

 *${usedPrefix}help* para ver el Menu
`.trim())
}
handler.help = ['—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü—ã—è'].map(v => v + ' <nombre.edad>')
handler.tags = ['rg']

handler.command = ['verify', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü—ã—è', 'register', 'registrar'] 

export default handler

