let { generateWAMessageFromContent, prepareWAMessageMedia, proto } = (await import('@adiwajshing/baileys')).default
import fetch from 'node-fetch'
const { getBinaryNodeChild, getBinaryNodeChildren } = (await import('@adiwajshing/baileys')).default
let handler = async (m, { conn, text, participants, args }) => {  
if (!global.db.data.settings[conn.user.jid].restrict) throw '*[ ‚ö†Ô∏è ] –°–û–ó–î–ê–¢–ï–õ–¨ –í–´–ö–õ–Æ–ß–ò–õ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø*'
if (!args[0]) throw '*[‚ùó] ùô∏ùôΩùô∂ùöÅùô¥ùöÇùô¥ ùô¥ùôª ùôΩùöÑùôºùô¥ùöÅùôæ ùô≥ùô¥ùôª ùöÑùöÇùöÑùô∞ùöÅùô∏ùôæ ùöÄùöÑùô¥ ùô≥ùô¥ùöÇùô¥ùô¥ ùô∞ùô∂ùöÅùô¥ùô∂ùô∞ùöÅ*'    
try {    
let _participants = participants.map(user => user.id)
let users = (await Promise.all(
text.split(',')
.map(v => v.replace(/[^0-9]/g, ''))
.filter(v => v.length > 4 && v.length < 20 && !_participants.includes(v + '@s.whatsapp.net'))
.map(async v => [v, await conn.onWhatsApp(v + '@s.whatsapp.net')]))).filter(v => v[1][0]?.exists).map(v => v[0] + '@c.us')
const response = await conn.query({ tag: 'iq', attrs: { type: 'set', xmlns: 'w:g2', to: m.chat }, content: users.map(jid => ({ tag: 'add', attrs: {}, content: [{ tag: 'participant', attrs: { jid } }]}))})
const pp = await conn.profilePictureUrl(m.chat).catch(_ => null)
const jpegThumbnail = pp ? await (await fetch(pp)).buffer() : Buffer.alloc(0)
const add = getBinaryNodeChild(response, 'add')
const participant = getBinaryNodeChildren(add, 'participant')
for (const user of participant.filter(item => item.attrs.error == 403)) {
const jid = user.attrs.jid
const content = getBinaryNodeChild(user, 'add_request')
const invite_code = content.attrs.code
const invite_code_exp = content.attrs.expiration
let teks = `*[‚ùóùêàùêçùêÖùêé‚ùó]–û–°–¢–ê–í–¢–ï –ú–ï–ù–Ø –í –ü–û–ö–û–ï @${jid.split('@')[0]},`
m.reply(teks, null, { mentions: conn.parseMention(teks)})
let captionn = `–≠–π!! –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Å—å, —è –í–∞–Ω–∏–ª—å–∫–∞, –∏ —è –±–æ—Ç –¥–ª—è WhatsApp, —á–µ–ª–æ–≤–µ–∫ –∏–∑ –≥—Ä—É–ø–ø—ã, —è –∏—Å–ø–æ–ª—å–∑—É—é –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≥—Ä—É–ø–ø—É, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å, –ø–æ—ç—Ç–æ–º—É —è –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è, –º—ã –∂–¥–µ–º –≤–∞—Å!!`    
var messaa = await prepareWAMessageMedia({ image: jpegThumbnail }, { upload: conn.waUploadToServer })
var groupInvite = generateWAMessageFromContent(m.chat, proto.Message.fromObject({ groupInviteMessage: { groupJid: m.chat, inviteCode: invite_code, inviteExpiration: invite_code_exp, groupName: await conn.getName(m.chat), caption: captionn, jpegThumbnail: jpegThumbnail }}), { userJid: jid })
await conn.relayMessage(jid, groupInvite.message, { messageId: groupInvite.key.id })}
} catch {
throw '*[‚ùóùêàùêçùêÖùêé‚ùó] –Ø –ù–ï –ú–û–ì–£ –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–ì–û –ß–ï–õ–û–í–ï–ö–ê!!*'
}}
handler.help = ['add', '+'].map(v => v + ' n√∫mero')
handler.tags = ['group']
handler.command = /^(add|–¥–æ–±–∞–≤–∏—Ç—å|agregar|a√±adir|\+)$/i
handler.admin = handler.group = handler.botAdmin = true
export default handler

